* What is the difference between iter and into\_iter?
  :PROPERTIES:
  :CUSTOM_ID: what-is-the-difference-between-iter-and-into_iter
  :END:

[[https://stackoverflow.com/questions/34733811/what-is-the-difference-between-iter-and-into-iter#34745885][source
(StackOverflow)]]

*** The first question is: "What is into\_iter?"
    :PROPERTIES:
    :CUSTOM_ID: the-first-question-is-what-is-into_iter
    :END:

=into_iter= comes from the =IntoIterator= trait:

#+BEGIN_EXAMPLE
    pub trait IntoIterator
    where
        <Self::IntoIter as Iterator>::Item == Self::Item,
    {
        type Item;
        type IntoIter: Iterator;
        fn into_iter(self) -> Self::IntoIter;
    }
#+END_EXAMPLE

You implement this trait when you want to specify how a particular type
is to be /converted into an iterator/. Most notably, if a type
implements =IntoIterator= it can be used in a =for loop=.

For example, =Vec= implements =IntoIterator=... thrice!

#+BEGIN_EXAMPLE
    impl<T> IntoIterator for Vec<T>
    impl<'a, T> IntoIterator for &'a Vec<T>
    impl<'a, T> IntoIterator for &'a mut Vec<T>
#+END_EXAMPLE

Each variant is slightly different.

This one consumes the =Vec= and its iterator yields /values/ (=T=
directly):

#+BEGIN_EXAMPLE
    impl<T> IntoIterator for Vec<T> {
        type Item = T;
        type IntoIter = IntoIter<T>;

        fn into_iter(mut self) -> IntoIter<T> { /* ... */ }
    }
#+END_EXAMPLE

The other two take the vector /by reference/ (don't be fooled by the
signature of =into_iter(self)= because =self= is a reference in both
cases) and their iterators will produce references to the elements
inside =Vec=.

This one yields /immutable/ references:

#+BEGIN_EXAMPLE
    impl<'a, T> IntoIterator for &'a Vec<T> {
        type Item = &'a T;
        type IntoIter = slice::Iter<'a, T>;

        fn into_iter(self) -> slice::Iter<'a, T> { /* ... */ }
    }
#+END_EXAMPLE

While this one yields mutable references:

#+BEGIN_EXAMPLE
    impl<'a, T> IntoIterator for &'a mut Vec<T> {
        type Item = &'a mut T;
        type IntoIter = slice::IterMut<'a, T>;

        fn into_iter(self) -> slice::IterMut<'a, T> { /* ... */ }
    }
#+END_EXAMPLE

*** What is the difference between =iter= and =into_iter=?
    :PROPERTIES:
    :CUSTOM_ID: what-is-the-difference-between-iter-and-into_iter-1
    :END:

=into_iter= is a generic method to obtain an /iterator/, whether this
/iterator/ yields /values/, /immutable references/ or /mutable
references/ is /context/ /dependent/ and can sometimes be surprising.

=iter= and =iter_mut= are ad-hoc methods. This works around the
context-dependent bit and, by convention, let you obtain an /iterator/
which will yield /references/.

The author of the Rust by Example post illustrates the surprise coming
from the dependence on the context (i.e., the type) on which =into_iter=
is called, and is also compounding the problem by using the fact that:

#+BEGIN_EXAMPLE
    IntoIterator is not implemented for [T; N], only for &[T; N] and &mut [T; N]

    When a method is not implemented for a value, it is automatically searched for
    references to that value instead.
#+END_EXAMPLE

which is very surprising for =into_iter= since all types (except
=[T; N]=) implement it for all 3 variations (/value/ and /references/).
It's not possible for the array to implement an /iterator/ that yields
/values/ because it cannot "shrink" to give up its items.

As to why arrays implement =IntoIterator= (in such a surprising
fashion): it's to make it possible to iterate over references to them in
for loops.

- [[https://doc.rust-lang.org/std/iter/trait.IntoIterator.html][IntoIterator
  trait]]
- [[https://doc.rust-lang.org/std/vec/struct.Vec.html#impl-IntoIterator][yields
  values]]
- [[https://doc.rust-lang.org/std/vec/struct.Vec.html#impl-IntoIterator-1][yields
  immutable references]]
- [[https://doc.rust-lang.org/std/vec/struct.Vec.html#impl-IntoIterator-2][yields
  mutable references]]
