* Announcing Rust 1.31 and Rust 2018 

[[https://blog.rust-lang.org/2018/12/06/Rust-1.31-and-rust-2018.html#const-fn][(blog.rust-lang.org)]]

** const fn

There's several ways to define a function in Rust: a regular function
with fn, an unsafe function with unsafe fn, an external function with
extern fn. This release adds a new way to qualify a function: const
fn. It looks like this:

: const fn foo(x: i32) -> i32 {
:     x + 1
: }

A const fn can be called like a regular function, but it can also be
used in any constant context. When it is, it is evaluated at compile
time, rather than at run time. As an example:

: const SIX: i32 = foo(5);

This will execute foo at compile time, and set SIX to 6.

const fns cannot do everything that normal fns can do; they must have
deterministic output. This is important for soundness
reasons. Currently, const fns can do a minimal subset of
operations. Here's some examples of what you can do:

- Arithmetic and comparison operators on integers
- All boolean operators except for && and ||
- Constructing arrays, structs, enums, and tuples
- Calls to other const fns
- Index expressions on arrays and slices
- Field accesses on structs and tuples
- Reading from constants (but not statics, not even taking a reference to a static)
- & and * of references
- Casts, except for raw pointer to integer casts

We'll be growing the abilities of const fn, but we've decided that this
is enough useful stuff to start shipping the feature itself.

For full details, please see the reference.

* Announcing Rust 1.33.0

[[https://blog.rust-lang.org/2019/02/28/Rust-1.33.0.html#const-fn-improvements][(blog.rust-lang.org)]]

** const fn improvements

With =const fn=, you can now do way more things! Specifically:

- irrefutable destructuring patterns (e.g. 
  =const fn foo((x, y): (u8, u8)) { ... })=
- let bindings (e.g. let x = 1;)
- mutable let bindings (e.g. let mut x = 1;)
- assignment (e.g. x = y) and assignment operator (e.g. x += y)
  expressions, even where the assignment target is a projection (e.g. a
  struct field or index operation like x[3] = 42)
- expression statements (e.g. 3;)
  
You're also able to call const unsafe fns inside a const fn, like this:

: const unsafe fn foo() -> i32 { 5 }
: const fn bar() -> i32 {
:     unsafe { foo() }
: }

With these additions, many more functions in the standard library are
able to be marked as const. We'll enumerate those in the library section
below.

** reference

[[https://doc.rust-lang.org/reference/items/functions.html#const-functions][(doc.rust-lang.org), ]][[https://github.com/rust-lang-nursery/reference/blob/master/src/items/functions.md#const-functions][(github.com)]]

** Const functions
   :PROPERTIES:
   :CUSTOM_ID: const-functions
   :END:

Functions qualified with the =const= keyword are const functions. /Const
functions/ can be called from within [const context]s. When called from
a const context, the function is interpreted by the compiler at compile
time. The interpretation happens in the environment of the compilation
target and not the host. So =usize= is =32= bits if you are compiling
against a =32= bit system, irrelevant of whether you are building on a
=64= bit or a =32= bit system.

If a const function is called outside a [const context], it is
indistinguishable from any other function. You can freely do anything
with a const function that you can do with a regular function.

Const functions have various restrictions to make sure that they can be
evaluated at compile-time. It is, for example, not possible to write a
random number generator as a const function. Calling a const function at
compile-time will always yield the same result as calling it at runtime,
even when called multiple times. There's one exception to this rule: if
you are doing complex floating point operations in extreme situations,
then you might get (very slightly) different results. It is advisable to
not make array lengths and enum discriminants depend on floating point
computations.

Exhaustive list of permitted structures in const functions:

#+BEGIN_QUOTE
  *Note*: this list is more restrictive than what you can write in
  regular constants
#+END_QUOTE

- Type parameters where the parameters only have any [trait bounds] of
  the following kind:

  - lifetimes
  - =Sized= or [=?Sized=]

  This means that =<T: 'a + ?Sized>=, =<T: 'b + Sized>= and =<T>= are
  all permitted.

  This rule also applies to type parameters of impl blocks that contain
  const methods

- Arithmetic and comparison operators on integers
- All boolean operators except for =&&= and =||= which are banned since
  they are short-circuiting.
- Any kind of aggregate constructor (array, =struct=, =enum=, tuple,
  ...)
- Calls to other /safe/ const functions (whether by function call or
  method call)
- Index expressions on arrays and slices
- Field accesses on structs and tuples
- Reading from constants (but not statics, not even taking a reference
  to a static)
- =&= and =*= (only dereferencing of references, not raw pointers)
- Casts except for raw pointer to integer casts
- =unsafe= blocks and =const unsafe fn= are allowed, but the body/block
  may only do the following unsafe operations:

  - calls to const unsafe functions

